#######################
# Input Schema
#######################

type BookReference {
	id: ID!
	name: String! @search(by: [term,exact])
	number: Int! @search
	chapterReferences(filter: ChapterReferenceFilter, order: ChapterReferenceOrder, first: Int, offset: Int): [ChapterReference!] @hasInverse(field: bookReference)
	chapterReferencesAggregate(filter: ChapterReferenceFilter): ChapterReferenceAggregateResult
}

type ChapterReference {
	id: ID!
	number: Int! @search
	bookReference(filter: BookReferenceFilter): BookReference! @hasInverse(field: chapterReferences)
	verseReferences(filter: VerseReferenceFilter, order: VerseReferenceOrder, first: Int, offset: Int): [VerseReference!] @hasInverse(field: chapterReference)
	verseReferencesAggregate(filter: VerseReferenceFilter): VerseReferenceAggregateResult
}

type VerseReference {
	id: ID!
	number: Int! @search
	chapterReference(filter: ChapterReferenceFilter): ChapterReference! @hasInverse(field: verseReferences)
}

type BibleVersion {
	id: ID!
	name: String! @search(by: [term,exact])
	language(filter: ISOLanguageFilter): ISOLanguage!
	script(filter: ISOScriptFilter): ISOScript!
	abbreviation: String @search
	rights: String @search(by: [term,exact])
	revisions(filter: BibleRevisionFilter, order: BibleRevisionOrder, first: Int, offset: Int): [BibleRevision] @hasInverse(field: bibleVersion)
	revisionsAggregate(filter: BibleRevisionFilter): BibleRevisionAggregateResult
}

type ISOLanguage {
	id: ID!
	iso639: String! @search(by: [exact])
	name: String! @search(by: [term,exact])
	bibleVersions(filter: BibleVersionFilter, order: BibleVersionOrder, first: Int, offset: Int): [BibleVersion]
	bibleVersionsAggregate(filter: BibleVersionFilter): BibleVersionAggregateResult
}

type ISOScript {
	id: ID!
	iso15924: String! @search(by: [exact])
	name: String! @search(by: [term,exact])
	bibleVersions(filter: BibleVersionFilter, order: BibleVersionOrder, first: Int, offset: Int): [BibleVersion]
	bibleVersionsAggregate(filter: BibleVersionFilter): BibleVersionAggregateResult
}

type BibleRevision {
	id: ID!
	date: DateTime! @search
	bibleVersion(filter: BibleVersionFilter): BibleVersion! @hasInverse(field: revisions)
	verseTexts(filter: VerseTextFilter, order: VerseTextOrder, first: Int, offset: Int): [VerseText!] @hasInverse(field: bibleRevision)
	assessments(filter: AssessmentFilter, order: AssessmentOrder, first: Int, offset: Int): [Assessment] @hasInverse(field: bibleRevision)
	verseTextsAggregate(filter: VerseTextFilter): VerseTextAggregateResult
	assessmentsAggregate(filter: AssessmentFilter): AssessmentAggregateResult
}

type VerseText {
	id: ID!
	text: String! @search(by: [term])
	verseReference(filter: VerseReferenceFilter, order: VerseReferenceOrder, first: Int, offset: Int): [VerseReference!]
	bibleRevision(filter: BibleRevisionFilter): BibleRevision! @hasInverse(field: verseTexts)
	assessmentDetails(filter: AssessmentDetailFilter, first: Int, offset: Int): [AssessmentDetail]
	verseReferenceAggregate(filter: VerseReferenceFilter): VerseReferenceAggregateResult
	assessmentDetailsAggregate(filter: AssessmentDetailFilter): AssessmentDetailAggregateResult
}

enum AssessmentType {
	SemanticSimilarity
	QAComprehensibility
	SubwordsPerSentence
}

type Assessment {
	id: ID!
	type: AssessmentType! @search(by: [exact])
	bibleRevision(filter: BibleRevisionFilter): BibleRevision! @hasInverse(field: assessments)
	reference(filter: BibleRevisionFilter): BibleRevision
	date: DateTime! @search
	details(filter: AssessmentDetailFilter, first: Int, offset: Int): [AssessmentDetail!] @hasInverse(field: assessment)
	detailsAggregate(filter: AssessmentDetailFilter): AssessmentDetailAggregateResult
}

type AssessmentDetail {
	id: ID!
	assessment(filter: AssessmentFilter): Assessment! @hasInverse(field: details)
	assessmentMetrics(filter: AssessmentMetricFilter, order: AssessmentMetricOrder, first: Int, offset: Int): [AssessmentMetric!] @hasInverse(field: assessmentDetail)
	verseTexts(filter: VerseTextFilter, order: VerseTextOrder, first: Int, offset: Int): [VerseText]
	assessmentMetricsAggregate(filter: AssessmentMetricFilter): AssessmentMetricAggregateResult
	verseTextsAggregate(filter: VerseTextFilter): VerseTextAggregateResult
}

type AssessmentMetric {
	id: ID!
	assessmentDetail(filter: AssessmentDetailFilter): AssessmentDetail! @hasInverse(field: assessmentMetrics)
	flag: Boolean @search
	number: Float @search
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
"""
scalar DateTime

input IntRange{
	min: Int!
	max: Int!
}

input FloatRange{
	min: Float!
	max: Float!
}

input Int64Range{
	min: Int64!
	max: Int64!
}

input DateTimeRange{
	min: DateTime!
	max: DateTime!
}

input StringRange{
	min: String!
	max: String!
}

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
	geo
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

type Point {
	longitude: Float!
	latitude: Float!
}

input PointRef {
	longitude: Float!
	latitude: Float!
}

input NearFilter {
	distance: Float!
	coordinate: PointRef!
}

input PointGeoFilter {
	near: NearFilter
	within: WithinFilter
}

type PointList {
	points: [Point!]!
}

input PointListRef {
	points: [PointRef!]!
}

type Polygon {
	coordinates: [PointList!]!
}

input PolygonRef {
	coordinates: [PointListRef!]!
}

type MultiPolygon {
	polygons: [Polygon!]!
}

input MultiPolygonRef {
	polygons: [PolygonRef!]!
}

input WithinFilter {
	polygon: PolygonRef!
}

input ContainsFilter {
	point: PointRef
	polygon: PolygonRef
}

input IntersectsFilter {
	polygon: PolygonRef
	multiPolygon: MultiPolygonRef
}

input PolygonGeoFilter {
	near: NearFilter
	within: WithinFilter
	contains: ContainsFilter
	intersects: IntersectsFilter
}

input GenerateQueryParams {
	get: Boolean
	query: Boolean
	password: Boolean
	aggregate: Boolean
}

input GenerateMutationParams {
	add: Boolean
	update: Boolean
	delete: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE | FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	password: AuthRule
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete: AuthRule) on OBJECT | INTERFACE
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM
directive @remoteResponse(name: String) on FIELD_DEFINITION
directive @cascade(fields: [String]) on FIELD
directive @lambda on FIELD_DEFINITION
directive @lambdaOnMutate(add: Boolean, update: Boolean, delete: Boolean) on OBJECT | INTERFACE
directive @cacheControl(maxAge: Int!) on QUERY
directive @generate(
	query: GenerateQueryParams,
	mutation: GenerateMutationParams,
	subscription: Boolean) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	in: [Int]
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: IntRange
}

input Int64Filter {
	eq: Int64
	in: [Int64]
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
	between: Int64Range
}

input FloatFilter {
	eq: Float
	in: [Float]
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: FloatRange
}

input DateTimeFilter {
	eq: DateTime
	in: [DateTime]
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
	between: DateTimeRange
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
}

input StringHashFilter {
	eq: String
	in: [String]
}

#######################
# Generated Types
#######################

type AddAssessmentDetailPayload {
	assessmentDetail(filter: AssessmentDetailFilter, first: Int, offset: Int): [AssessmentDetail]
	numUids: Int
}

type AddAssessmentMetricPayload {
	assessmentMetric(filter: AssessmentMetricFilter, order: AssessmentMetricOrder, first: Int, offset: Int): [AssessmentMetric]
	numUids: Int
}

type AddAssessmentPayload {
	assessment(filter: AssessmentFilter, order: AssessmentOrder, first: Int, offset: Int): [Assessment]
	numUids: Int
}

type AddBibleRevisionPayload {
	bibleRevision(filter: BibleRevisionFilter, order: BibleRevisionOrder, first: Int, offset: Int): [BibleRevision]
	numUids: Int
}

type AddBibleVersionPayload {
	bibleVersion(filter: BibleVersionFilter, order: BibleVersionOrder, first: Int, offset: Int): [BibleVersion]
	numUids: Int
}

type AddBookReferencePayload {
	bookReference(filter: BookReferenceFilter, order: BookReferenceOrder, first: Int, offset: Int): [BookReference]
	numUids: Int
}

type AddChapterReferencePayload {
	chapterReference(filter: ChapterReferenceFilter, order: ChapterReferenceOrder, first: Int, offset: Int): [ChapterReference]
	numUids: Int
}

type AddISOLanguagePayload {
	iSOLanguage(filter: ISOLanguageFilter, order: ISOLanguageOrder, first: Int, offset: Int): [ISOLanguage]
	numUids: Int
}

type AddISOScriptPayload {
	iSOScript(filter: ISOScriptFilter, order: ISOScriptOrder, first: Int, offset: Int): [ISOScript]
	numUids: Int
}

type AddVerseReferencePayload {
	verseReference(filter: VerseReferenceFilter, order: VerseReferenceOrder, first: Int, offset: Int): [VerseReference]
	numUids: Int
}

type AddVerseTextPayload {
	verseText(filter: VerseTextFilter, order: VerseTextOrder, first: Int, offset: Int): [VerseText]
	numUids: Int
}

type AssessmentAggregateResult {
	count: Int
	dateMin: DateTime
	dateMax: DateTime
}

type AssessmentDetailAggregateResult {
	count: Int
}

type AssessmentMetricAggregateResult {
	count: Int
	numberMin: Float
	numberMax: Float
	numberSum: Float
	numberAvg: Float
}

type BibleRevisionAggregateResult {
	count: Int
	dateMin: DateTime
	dateMax: DateTime
}

type BibleVersionAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	abbreviationMin: String
	abbreviationMax: String
	rightsMin: String
	rightsMax: String
}

type BookReferenceAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	numberMin: Int
	numberMax: Int
	numberSum: Int
	numberAvg: Float
}

type ChapterReferenceAggregateResult {
	count: Int
	numberMin: Int
	numberMax: Int
	numberSum: Int
	numberAvg: Float
}

type DeleteAssessmentDetailPayload {
	assessmentDetail(filter: AssessmentDetailFilter, first: Int, offset: Int): [AssessmentDetail]
	msg: String
	numUids: Int
}

type DeleteAssessmentMetricPayload {
	assessmentMetric(filter: AssessmentMetricFilter, order: AssessmentMetricOrder, first: Int, offset: Int): [AssessmentMetric]
	msg: String
	numUids: Int
}

type DeleteAssessmentPayload {
	assessment(filter: AssessmentFilter, order: AssessmentOrder, first: Int, offset: Int): [Assessment]
	msg: String
	numUids: Int
}

type DeleteBibleRevisionPayload {
	bibleRevision(filter: BibleRevisionFilter, order: BibleRevisionOrder, first: Int, offset: Int): [BibleRevision]
	msg: String
	numUids: Int
}

type DeleteBibleVersionPayload {
	bibleVersion(filter: BibleVersionFilter, order: BibleVersionOrder, first: Int, offset: Int): [BibleVersion]
	msg: String
	numUids: Int
}

type DeleteBookReferencePayload {
	bookReference(filter: BookReferenceFilter, order: BookReferenceOrder, first: Int, offset: Int): [BookReference]
	msg: String
	numUids: Int
}

type DeleteChapterReferencePayload {
	chapterReference(filter: ChapterReferenceFilter, order: ChapterReferenceOrder, first: Int, offset: Int): [ChapterReference]
	msg: String
	numUids: Int
}

type DeleteISOLanguagePayload {
	iSOLanguage(filter: ISOLanguageFilter, order: ISOLanguageOrder, first: Int, offset: Int): [ISOLanguage]
	msg: String
	numUids: Int
}

type DeleteISOScriptPayload {
	iSOScript(filter: ISOScriptFilter, order: ISOScriptOrder, first: Int, offset: Int): [ISOScript]
	msg: String
	numUids: Int
}

type DeleteVerseReferencePayload {
	verseReference(filter: VerseReferenceFilter, order: VerseReferenceOrder, first: Int, offset: Int): [VerseReference]
	msg: String
	numUids: Int
}

type DeleteVerseTextPayload {
	verseText(filter: VerseTextFilter, order: VerseTextOrder, first: Int, offset: Int): [VerseText]
	msg: String
	numUids: Int
}

type ISOLanguageAggregateResult {
	count: Int
	iso639Min: String
	iso639Max: String
	nameMin: String
	nameMax: String
}

type ISOScriptAggregateResult {
	count: Int
	iso15924Min: String
	iso15924Max: String
	nameMin: String
	nameMax: String
}

type UpdateAssessmentDetailPayload {
	assessmentDetail(filter: AssessmentDetailFilter, first: Int, offset: Int): [AssessmentDetail]
	numUids: Int
}

type UpdateAssessmentMetricPayload {
	assessmentMetric(filter: AssessmentMetricFilter, order: AssessmentMetricOrder, first: Int, offset: Int): [AssessmentMetric]
	numUids: Int
}

type UpdateAssessmentPayload {
	assessment(filter: AssessmentFilter, order: AssessmentOrder, first: Int, offset: Int): [Assessment]
	numUids: Int
}

type UpdateBibleRevisionPayload {
	bibleRevision(filter: BibleRevisionFilter, order: BibleRevisionOrder, first: Int, offset: Int): [BibleRevision]
	numUids: Int
}

type UpdateBibleVersionPayload {
	bibleVersion(filter: BibleVersionFilter, order: BibleVersionOrder, first: Int, offset: Int): [BibleVersion]
	numUids: Int
}

type UpdateBookReferencePayload {
	bookReference(filter: BookReferenceFilter, order: BookReferenceOrder, first: Int, offset: Int): [BookReference]
	numUids: Int
}

type UpdateChapterReferencePayload {
	chapterReference(filter: ChapterReferenceFilter, order: ChapterReferenceOrder, first: Int, offset: Int): [ChapterReference]
	numUids: Int
}

type UpdateISOLanguagePayload {
	iSOLanguage(filter: ISOLanguageFilter, order: ISOLanguageOrder, first: Int, offset: Int): [ISOLanguage]
	numUids: Int
}

type UpdateISOScriptPayload {
	iSOScript(filter: ISOScriptFilter, order: ISOScriptOrder, first: Int, offset: Int): [ISOScript]
	numUids: Int
}

type UpdateVerseReferencePayload {
	verseReference(filter: VerseReferenceFilter, order: VerseReferenceOrder, first: Int, offset: Int): [VerseReference]
	numUids: Int
}

type UpdateVerseTextPayload {
	verseText(filter: VerseTextFilter, order: VerseTextOrder, first: Int, offset: Int): [VerseText]
	numUids: Int
}

type VerseReferenceAggregateResult {
	count: Int
	numberMin: Int
	numberMax: Int
	numberSum: Int
	numberAvg: Float
}

type VerseTextAggregateResult {
	count: Int
	textMin: String
	textMax: String
}

#######################
# Generated Enums
#######################

enum AssessmentDetailHasFilter {
	assessment
	assessmentMetrics
	verseTexts
}

enum AssessmentHasFilter {
	type
	bibleRevision
	reference
	date
	details
}

enum AssessmentMetricHasFilter {
	assessmentDetail
	flag
	number
}

enum AssessmentMetricOrderable {
	number
}

enum AssessmentOrderable {
	date
}

enum BibleRevisionHasFilter {
	date
	bibleVersion
	verseTexts
	assessments
}

enum BibleRevisionOrderable {
	date
}

enum BibleVersionHasFilter {
	name
	language
	script
	abbreviation
	rights
	revisions
}

enum BibleVersionOrderable {
	name
	abbreviation
	rights
}

enum BookReferenceHasFilter {
	name
	number
	chapterReferences
}

enum BookReferenceOrderable {
	name
	number
}

enum ChapterReferenceHasFilter {
	number
	bookReference
	verseReferences
}

enum ChapterReferenceOrderable {
	number
}

enum ISOLanguageHasFilter {
	iso639
	name
	bibleVersions
}

enum ISOLanguageOrderable {
	iso639
	name
}

enum ISOScriptHasFilter {
	iso15924
	name
	bibleVersions
}

enum ISOScriptOrderable {
	iso15924
	name
}

enum VerseReferenceHasFilter {
	number
	chapterReference
}

enum VerseReferenceOrderable {
	number
}

enum VerseTextHasFilter {
	text
	verseReference
	bibleRevision
	assessmentDetails
}

enum VerseTextOrderable {
	text
}

#######################
# Generated Inputs
#######################

input AddAssessmentDetailInput {
	assessment: AssessmentRef!
	assessmentMetrics: [AssessmentMetricRef!]
	verseTexts: [VerseTextRef]
}

input AddAssessmentInput {
	type: AssessmentType!
	bibleRevision: BibleRevisionRef!
	reference: BibleRevisionRef
	date: DateTime!
	details: [AssessmentDetailRef!]
}

input AddAssessmentMetricInput {
	assessmentDetail: AssessmentDetailRef!
	flag: Boolean
	number: Float
}

input AddBibleRevisionInput {
	date: DateTime!
	bibleVersion: BibleVersionRef!
	verseTexts: [VerseTextRef!]
	assessments: [AssessmentRef]
}

input AddBibleVersionInput {
	name: String!
	language: ISOLanguageRef!
	script: ISOScriptRef!
	abbreviation: String
	rights: String
	revisions: [BibleRevisionRef]
}

input AddBookReferenceInput {
	name: String!
	number: Int!
	chapterReferences: [ChapterReferenceRef!]
}

input AddChapterReferenceInput {
	number: Int!
	bookReference: BookReferenceRef!
	verseReferences: [VerseReferenceRef!]
}

input AddISOLanguageInput {
	iso639: String!
	name: String!
	bibleVersions: [BibleVersionRef]
}

input AddISOScriptInput {
	iso15924: String!
	name: String!
	bibleVersions: [BibleVersionRef]
}

input AddVerseReferenceInput {
	number: Int!
	chapterReference: ChapterReferenceRef!
}

input AddVerseTextInput {
	text: String!
	verseReference: [VerseReferenceRef!]
	bibleRevision: BibleRevisionRef!
	assessmentDetails: [AssessmentDetailRef]
}

input AssessmentDetailFilter {
	id: [ID!]
	has: [AssessmentDetailHasFilter]
	and: [AssessmentDetailFilter]
	or: [AssessmentDetailFilter]
	not: AssessmentDetailFilter
}

input AssessmentDetailPatch {
	assessment: AssessmentRef
	assessmentMetrics: [AssessmentMetricRef!]
	verseTexts: [VerseTextRef]
}

input AssessmentDetailRef {
	id: ID
	assessment: AssessmentRef
	assessmentMetrics: [AssessmentMetricRef!]
	verseTexts: [VerseTextRef]
}

input AssessmentFilter {
	id: [ID!]
	type: AssessmentType_exact
	date: DateTimeFilter
	has: [AssessmentHasFilter]
	and: [AssessmentFilter]
	or: [AssessmentFilter]
	not: AssessmentFilter
}

input AssessmentMetricFilter {
	id: [ID!]
	flag: Boolean
	number: FloatFilter
	has: [AssessmentMetricHasFilter]
	and: [AssessmentMetricFilter]
	or: [AssessmentMetricFilter]
	not: AssessmentMetricFilter
}

input AssessmentMetricOrder {
	asc: AssessmentMetricOrderable
	desc: AssessmentMetricOrderable
	then: AssessmentMetricOrder
}

input AssessmentMetricPatch {
	assessmentDetail: AssessmentDetailRef
	flag: Boolean
	number: Float
}

input AssessmentMetricRef {
	id: ID
	assessmentDetail: AssessmentDetailRef
	flag: Boolean
	number: Float
}

input AssessmentOrder {
	asc: AssessmentOrderable
	desc: AssessmentOrderable
	then: AssessmentOrder
}

input AssessmentPatch {
	type: AssessmentType
	bibleRevision: BibleRevisionRef
	reference: BibleRevisionRef
	date: DateTime
	details: [AssessmentDetailRef!]
}

input AssessmentRef {
	id: ID
	type: AssessmentType
	bibleRevision: BibleRevisionRef
	reference: BibleRevisionRef
	date: DateTime
	details: [AssessmentDetailRef!]
}

input AssessmentType_exact {
	eq: AssessmentType
	in: [AssessmentType]
	le: AssessmentType
	lt: AssessmentType
	ge: AssessmentType
	gt: AssessmentType
	between: AssessmentType
}

input BibleRevisionFilter {
	id: [ID!]
	date: DateTimeFilter
	has: [BibleRevisionHasFilter]
	and: [BibleRevisionFilter]
	or: [BibleRevisionFilter]
	not: BibleRevisionFilter
}

input BibleRevisionOrder {
	asc: BibleRevisionOrderable
	desc: BibleRevisionOrderable
	then: BibleRevisionOrder
}

input BibleRevisionPatch {
	date: DateTime
	bibleVersion: BibleVersionRef
	verseTexts: [VerseTextRef!]
	assessments: [AssessmentRef]
}

input BibleRevisionRef {
	id: ID
	date: DateTime
	bibleVersion: BibleVersionRef
	verseTexts: [VerseTextRef!]
	assessments: [AssessmentRef]
}

input BibleVersionFilter {
	id: [ID!]
	name: StringExactFilter_StringTermFilter
	abbreviation: StringTermFilter
	rights: StringExactFilter_StringTermFilter
	has: [BibleVersionHasFilter]
	and: [BibleVersionFilter]
	or: [BibleVersionFilter]
	not: BibleVersionFilter
}

input BibleVersionOrder {
	asc: BibleVersionOrderable
	desc: BibleVersionOrderable
	then: BibleVersionOrder
}

input BibleVersionPatch {
	name: String
	language: ISOLanguageRef
	script: ISOScriptRef
	abbreviation: String
	rights: String
	revisions: [BibleRevisionRef]
}

input BibleVersionRef {
	id: ID
	name: String
	language: ISOLanguageRef
	script: ISOScriptRef
	abbreviation: String
	rights: String
	revisions: [BibleRevisionRef]
}

input BookReferenceFilter {
	id: [ID!]
	name: StringExactFilter_StringTermFilter
	number: IntFilter
	has: [BookReferenceHasFilter]
	and: [BookReferenceFilter]
	or: [BookReferenceFilter]
	not: BookReferenceFilter
}

input BookReferenceOrder {
	asc: BookReferenceOrderable
	desc: BookReferenceOrderable
	then: BookReferenceOrder
}

input BookReferencePatch {
	name: String
	number: Int
	chapterReferences: [ChapterReferenceRef!]
}

input BookReferenceRef {
	id: ID
	name: String
	number: Int
	chapterReferences: [ChapterReferenceRef!]
}

input ChapterReferenceFilter {
	id: [ID!]
	number: IntFilter
	has: [ChapterReferenceHasFilter]
	and: [ChapterReferenceFilter]
	or: [ChapterReferenceFilter]
	not: ChapterReferenceFilter
}

input ChapterReferenceOrder {
	asc: ChapterReferenceOrderable
	desc: ChapterReferenceOrderable
	then: ChapterReferenceOrder
}

input ChapterReferencePatch {
	number: Int
	bookReference: BookReferenceRef
	verseReferences: [VerseReferenceRef!]
}

input ChapterReferenceRef {
	id: ID
	number: Int
	bookReference: BookReferenceRef
	verseReferences: [VerseReferenceRef!]
}

input ISOLanguageFilter {
	id: [ID!]
	iso639: StringExactFilter
	name: StringExactFilter_StringTermFilter
	has: [ISOLanguageHasFilter]
	and: [ISOLanguageFilter]
	or: [ISOLanguageFilter]
	not: ISOLanguageFilter
}

input ISOLanguageOrder {
	asc: ISOLanguageOrderable
	desc: ISOLanguageOrderable
	then: ISOLanguageOrder
}

input ISOLanguagePatch {
	iso639: String
	name: String
	bibleVersions: [BibleVersionRef]
}

input ISOLanguageRef {
	id: ID
	iso639: String
	name: String
	bibleVersions: [BibleVersionRef]
}

input ISOScriptFilter {
	id: [ID!]
	iso15924: StringExactFilter
	name: StringExactFilter_StringTermFilter
	has: [ISOScriptHasFilter]
	and: [ISOScriptFilter]
	or: [ISOScriptFilter]
	not: ISOScriptFilter
}

input ISOScriptOrder {
	asc: ISOScriptOrderable
	desc: ISOScriptOrderable
	then: ISOScriptOrder
}

input ISOScriptPatch {
	iso15924: String
	name: String
	bibleVersions: [BibleVersionRef]
}

input ISOScriptRef {
	id: ID
	iso15924: String
	name: String
	bibleVersions: [BibleVersionRef]
}

input StringExactFilter_StringTermFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
	allofterms: String
	anyofterms: String
}

input UpdateAssessmentDetailInput {
	filter: AssessmentDetailFilter!
	set: AssessmentDetailPatch
	remove: AssessmentDetailPatch
}

input UpdateAssessmentInput {
	filter: AssessmentFilter!
	set: AssessmentPatch
	remove: AssessmentPatch
}

input UpdateAssessmentMetricInput {
	filter: AssessmentMetricFilter!
	set: AssessmentMetricPatch
	remove: AssessmentMetricPatch
}

input UpdateBibleRevisionInput {
	filter: BibleRevisionFilter!
	set: BibleRevisionPatch
	remove: BibleRevisionPatch
}

input UpdateBibleVersionInput {
	filter: BibleVersionFilter!
	set: BibleVersionPatch
	remove: BibleVersionPatch
}

input UpdateBookReferenceInput {
	filter: BookReferenceFilter!
	set: BookReferencePatch
	remove: BookReferencePatch
}

input UpdateChapterReferenceInput {
	filter: ChapterReferenceFilter!
	set: ChapterReferencePatch
	remove: ChapterReferencePatch
}

input UpdateISOLanguageInput {
	filter: ISOLanguageFilter!
	set: ISOLanguagePatch
	remove: ISOLanguagePatch
}

input UpdateISOScriptInput {
	filter: ISOScriptFilter!
	set: ISOScriptPatch
	remove: ISOScriptPatch
}

input UpdateVerseReferenceInput {
	filter: VerseReferenceFilter!
	set: VerseReferencePatch
	remove: VerseReferencePatch
}

input UpdateVerseTextInput {
	filter: VerseTextFilter!
	set: VerseTextPatch
	remove: VerseTextPatch
}

input VerseReferenceFilter {
	id: [ID!]
	number: IntFilter
	has: [VerseReferenceHasFilter]
	and: [VerseReferenceFilter]
	or: [VerseReferenceFilter]
	not: VerseReferenceFilter
}

input VerseReferenceOrder {
	asc: VerseReferenceOrderable
	desc: VerseReferenceOrderable
	then: VerseReferenceOrder
}

input VerseReferencePatch {
	number: Int
	chapterReference: ChapterReferenceRef
}

input VerseReferenceRef {
	id: ID
	number: Int
	chapterReference: ChapterReferenceRef
}

input VerseTextFilter {
	id: [ID!]
	text: StringTermFilter
	has: [VerseTextHasFilter]
	and: [VerseTextFilter]
	or: [VerseTextFilter]
	not: VerseTextFilter
}

input VerseTextOrder {
	asc: VerseTextOrderable
	desc: VerseTextOrderable
	then: VerseTextOrder
}

input VerseTextPatch {
	text: String
	verseReference: [VerseReferenceRef!]
	bibleRevision: BibleRevisionRef
	assessmentDetails: [AssessmentDetailRef]
}

input VerseTextRef {
	id: ID
	text: String
	verseReference: [VerseReferenceRef!]
	bibleRevision: BibleRevisionRef
	assessmentDetails: [AssessmentDetailRef]
}

#######################
# Generated Query
#######################

type Query {
	getBookReference(id: ID!): BookReference
	queryBookReference(filter: BookReferenceFilter, order: BookReferenceOrder, first: Int, offset: Int): [BookReference]
	aggregateBookReference(filter: BookReferenceFilter): BookReferenceAggregateResult
	getChapterReference(id: ID!): ChapterReference
	queryChapterReference(filter: ChapterReferenceFilter, order: ChapterReferenceOrder, first: Int, offset: Int): [ChapterReference]
	aggregateChapterReference(filter: ChapterReferenceFilter): ChapterReferenceAggregateResult
	getVerseReference(id: ID!): VerseReference
	queryVerseReference(filter: VerseReferenceFilter, order: VerseReferenceOrder, first: Int, offset: Int): [VerseReference]
	aggregateVerseReference(filter: VerseReferenceFilter): VerseReferenceAggregateResult
	getBibleVersion(id: ID!): BibleVersion
	queryBibleVersion(filter: BibleVersionFilter, order: BibleVersionOrder, first: Int, offset: Int): [BibleVersion]
	aggregateBibleVersion(filter: BibleVersionFilter): BibleVersionAggregateResult
	getISOLanguage(id: ID!): ISOLanguage
	queryISOLanguage(filter: ISOLanguageFilter, order: ISOLanguageOrder, first: Int, offset: Int): [ISOLanguage]
	aggregateISOLanguage(filter: ISOLanguageFilter): ISOLanguageAggregateResult
	getISOScript(id: ID!): ISOScript
	queryISOScript(filter: ISOScriptFilter, order: ISOScriptOrder, first: Int, offset: Int): [ISOScript]
	aggregateISOScript(filter: ISOScriptFilter): ISOScriptAggregateResult
	getBibleRevision(id: ID!): BibleRevision
	queryBibleRevision(filter: BibleRevisionFilter, order: BibleRevisionOrder, first: Int, offset: Int): [BibleRevision]
	aggregateBibleRevision(filter: BibleRevisionFilter): BibleRevisionAggregateResult
	getVerseText(id: ID!): VerseText
	queryVerseText(filter: VerseTextFilter, order: VerseTextOrder, first: Int, offset: Int): [VerseText]
	aggregateVerseText(filter: VerseTextFilter): VerseTextAggregateResult
	getAssessment(id: ID!): Assessment
	queryAssessment(filter: AssessmentFilter, order: AssessmentOrder, first: Int, offset: Int): [Assessment]
	aggregateAssessment(filter: AssessmentFilter): AssessmentAggregateResult
	getAssessmentDetail(id: ID!): AssessmentDetail
	queryAssessmentDetail(filter: AssessmentDetailFilter, first: Int, offset: Int): [AssessmentDetail]
	aggregateAssessmentDetail(filter: AssessmentDetailFilter): AssessmentDetailAggregateResult
	getAssessmentMetric(id: ID!): AssessmentMetric
	queryAssessmentMetric(filter: AssessmentMetricFilter, order: AssessmentMetricOrder, first: Int, offset: Int): [AssessmentMetric]
	aggregateAssessmentMetric(filter: AssessmentMetricFilter): AssessmentMetricAggregateResult
}

#######################
# Generated Mutations
#######################

type Mutation {
	addBookReference(input: [AddBookReferenceInput!]!): AddBookReferencePayload
	updateBookReference(input: UpdateBookReferenceInput!): UpdateBookReferencePayload
	deleteBookReference(filter: BookReferenceFilter!): DeleteBookReferencePayload
	addChapterReference(input: [AddChapterReferenceInput!]!): AddChapterReferencePayload
	updateChapterReference(input: UpdateChapterReferenceInput!): UpdateChapterReferencePayload
	deleteChapterReference(filter: ChapterReferenceFilter!): DeleteChapterReferencePayload
	addVerseReference(input: [AddVerseReferenceInput!]!): AddVerseReferencePayload
	updateVerseReference(input: UpdateVerseReferenceInput!): UpdateVerseReferencePayload
	deleteVerseReference(filter: VerseReferenceFilter!): DeleteVerseReferencePayload
	addBibleVersion(input: [AddBibleVersionInput!]!): AddBibleVersionPayload
	updateBibleVersion(input: UpdateBibleVersionInput!): UpdateBibleVersionPayload
	deleteBibleVersion(filter: BibleVersionFilter!): DeleteBibleVersionPayload
	addISOLanguage(input: [AddISOLanguageInput!]!): AddISOLanguagePayload
	updateISOLanguage(input: UpdateISOLanguageInput!): UpdateISOLanguagePayload
	deleteISOLanguage(filter: ISOLanguageFilter!): DeleteISOLanguagePayload
	addISOScript(input: [AddISOScriptInput!]!): AddISOScriptPayload
	updateISOScript(input: UpdateISOScriptInput!): UpdateISOScriptPayload
	deleteISOScript(filter: ISOScriptFilter!): DeleteISOScriptPayload
	addBibleRevision(input: [AddBibleRevisionInput!]!): AddBibleRevisionPayload
	updateBibleRevision(input: UpdateBibleRevisionInput!): UpdateBibleRevisionPayload
	deleteBibleRevision(filter: BibleRevisionFilter!): DeleteBibleRevisionPayload
	addVerseText(input: [AddVerseTextInput!]!): AddVerseTextPayload
	updateVerseText(input: UpdateVerseTextInput!): UpdateVerseTextPayload
	deleteVerseText(filter: VerseTextFilter!): DeleteVerseTextPayload
	addAssessment(input: [AddAssessmentInput!]!): AddAssessmentPayload
	updateAssessment(input: UpdateAssessmentInput!): UpdateAssessmentPayload
	deleteAssessment(filter: AssessmentFilter!): DeleteAssessmentPayload
	addAssessmentDetail(input: [AddAssessmentDetailInput!]!): AddAssessmentDetailPayload
	updateAssessmentDetail(input: UpdateAssessmentDetailInput!): UpdateAssessmentDetailPayload
	deleteAssessmentDetail(filter: AssessmentDetailFilter!): DeleteAssessmentDetailPayload
	addAssessmentMetric(input: [AddAssessmentMetricInput!]!): AddAssessmentMetricPayload
	updateAssessmentMetric(input: UpdateAssessmentMetricInput!): UpdateAssessmentMetricPayload
	deleteAssessmentMetric(filter: AssessmentMetricFilter!): DeleteAssessmentMetricPayload
}

