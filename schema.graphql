interface Reference {
  id: ID!
  number: Int! @search
}

type BookReference implements Reference{
  id: ID!
  abbreviation: String! @search @id
  name: String! @search(by: [term, exact])
  localizedBookName: [LocalizedBookName] @hasInverse(field: bookReference)
  number: Int! @search 
  chapterReferences: [ChapterReference!] @hasInverse(field: bookReference)
}


type ChapterReference implements Reference{
  id: ID!
  number: Int! @search
  bookReference: BookReference!
  verseReferences: [VerseReference!] @hasInverse(field: chapterReference)
}

type VerseReference implements Reference{
  id: ID!
  fullVerseId: String! @search @id
  number: Int! @search
  chapterReference: ChapterReference!
}

type BibleVersion {
  id: ID!
  name: String! @search(by: [term, exact])
  isoLanguage: ISOLanguage! @hasInverse(field: bibleVersions)
  isoScript: ISOScript! @hasInverse(field: bibleVersions)
  abbreviation: String! @search @id
  rights: String @search(by: [term, exact])
  localizedBooks: [LocalizedBookName] @hasInverse(field: bibleVersion)
  revisions: [BibleRevision] @hasInverse(field: bibleVersion)
  forwardTranslation: BibleVersion @hasInverse(field: backTranslation)
  backTranslation: BibleVersion @hasInverse(field: forwardTranslation)
  machineTranslation: Boolean
}

type LocalizedBookName {
  id: ID!
  name: String! @search(by: [term, exact])
  bookReference: BookReference! @hasInverse(field: localizedBookName)
  bibleVersion: BibleVersion! @hasInverse(field: localizedBooks)
}

type ISOLanguage {
  id: ID!
  iso639: String! @search(by: [exact]) @id
  name: String! @search(by: [term, exact])
  bibleVersions: [BibleVersion] @hasInverse(field: isoLanguage)
  semanticDomainQuestions: [SemanticDomainQuestion] @hasInverse(field: isoLanguage)
}

type ISOScript {
  id: ID!
  iso15924: String! @search(by: [exact]) @id
  name: String! @search(by: [term, exact])
  bibleVersions: [BibleVersion] @hasInverse(field: isoScript)
}

type BibleRevision {
  id: ID!
  date: DateTime! @search
  bibleVersion: BibleVersion!
  published: Boolean
  verseTexts: [VerseText!] @hasInverse(field: bibleRevision)
  assessments: [Assessment] @hasInverse(field: bibleRevision)
}

type VerseText {
  id: ID!
  text: String! @search(by: [term])
  verseReference: [VerseReference!]
  bibleRevision: BibleRevision!
  textAnnotations: [TextAnnotation]
}

enum TextAnnotationType {
  SemanticSimilarity
  QAComprehensibility
  SubwordsPerSentence
  VersePart
  PartOfSpeech
  NamedEntity
}

enum ReferenceAnnotationType {
  SemanticDomain
  KeyTerm
}

type Assessment {
  id: ID!
  type: TextAnnotationType! @search(by: [exact])
  bibleRevision: BibleRevision!
  reference: BibleRevision
  date: DateTime! @search
  details: [TextAnnotation!] @hasInverse(field: assessment)
}

interface Annotation {
  id: ID!
  flag: Boolean @search
  number: Float @search
  tag: String @search
}

type TextAnnotation implements Annotation {
  id: ID!
  verseTexts: [VerseText!]
  startPosition: Int
  endPosition: Int
  refVerseTexts: [VerseText]
  refStartPosition: Int
  refEndPosition: Int
  flag: Boolean @search
  number: Float @search
  tag: String @search
  assessment: [Assessment] @hasInverse(field: details)
  type: TextAnnotationType!
}

type ReferenceAnnotation implements Annotation {
  id: ID!
  reference: [Reference!]
  flag: Boolean @search
  number: Float @search
  tag: String @search
  type: ReferenceAnnotationType!
  semanticDomains: [SemanticDomain] @hasInverse(field: referenceAnnotations)
}

type SemanticDomain {
  id: ID!
  cid: String! @search(by: [exact]) @id
  name: String! @search
  questions: [SemanticDomainQuestion!] @hasInverse(field: semanticDomain)
  parentSemanticDomain: SemanticDomain
  childSemanticDomains: [SemanticDomain] @hasInverse(field: parentSemanticDomain)
  referenceAnnotations: [ReferenceAnnotation] @hasInverse(field: semanticDomains)
}

type SemanticDomainQuestion {
  id: ID!
  text: String!
  semanticDomain: SemanticDomain! @hasInverse(field: questions)
  words: [Word!] @hasInverse(field: semanticDomainQuestions)
  isoLanguage: ISOLanguage!
}

type Word {
  id: ID!
  text: String! @search(by: [exact]) @id
  semanticDomainQuestions: [SemanticDomainQuestion!] @hasInverse(field: words)
}

